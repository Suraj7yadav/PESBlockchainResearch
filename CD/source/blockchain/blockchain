#!/usr/bin/php
<?php
/**Author: sin9yt a.k.a L0n3W0lf
 *
 * The block index simply maps a block to a disk offset for convenience.
 * It's not necessary, but it makes it much easier to quickly locate any
 * block within the chain.
 *
 * ISAM index:
 * [4] count
 * -----------
 * [4] offset
 * [4] length
 * ...
 *
 * Block format:
 * [4] magic
 * [1] format (0x01)
 * [4] timestamp
 * [n] hash of previous block
 * [4] data length
 * [?] data
 *
 *
 */
define('_magic', 0xD5E8A97F);
define('_hashalg', 'sha256');
define('_hashlen', 32);
define('_blksize', (13 + _hashlen));

echo "Select the Operation you want to perform\n1.Register domain\n2.Update Record\n3.Revoke Record\n";
$handle = fopen ("php://stdin","r");
$input = trim(fgets($handle));
fclose($handle);

switch($input)
{
	case 1: echo "Enter the data in the following format\n";
					echo "[1]Domain Name\n[2]Key\n[3]DNS Records(IP)\n";
					$handle = fopen ("php://stdin","r");
					$domain=fgets($handle);
					$key=fgets($handle);
					$ip=fgets($handle);
					$data="\n\t\t".$domain."\t\t".$key."\t\t".$ip;
					$res=addblock('blockchain.dat',$data);
					if ($res!==TRUE) exit("ERROR: ".$res."\n");
					else echo "Operation Succesful.\nDomain Registered!\n";
					fclose($handle);
					break;

	case 2: echo "Enter the data to be updated in the following format\n";
					echo "[1]Domain Name\n[2]Updated Key\n[3]Updated DNS Records(IP)\n";
					$handle = fopen ("php://stdin","r");
					$domain=fgets($handle);
					$key=fgets($handle);
					$ip=fgets($handle);
					$data="\n\t\tUpdate ".$domain."\t\t".$key."\t\t".$ip;
					$res=addblock('blockchain.dat',$data);
					if ($res!==TRUE) exit("ERROR: ".$res."\n");
					else echo "Operation Succesful.\nDomain Updated!\n";
					fclose($handle);
					break;

	case 3:	echo "Enter the domain you want to revoke:\n";
	 				$handle = fopen ("php://stdin","r");
					$revoke = fgets($handle);
					$revoke_data = "Revoke ".$revoke;
					$res=addblock('blockchain.dat',$revoke_data);
					if ($res!==TRUE) exit("ERROR: ".$res."\n");
					else echo "Operation Succesful.\nDomain Revoked!\n";
					fclose($handle);
					break;
	default:echo "Wrong Input. Exiting :(\n";
					exit;
}

function addblock($fn,$data,$genesis=FALSE) {
	$indexfn = $fn.'.idx';
	if (!$genesis) {
		if (!file_exists($fn)) return('Missing blockchain data file!');
		if (!file_exists($indexfn)) return('Missing blockchain index file!');
		// get disk location of last block from index
		if (!$ix = fopen($indexfn, 'r+b')) return("Can't open ".$indexfn);
		$maxblock = unpack('V', fread($ix,4))[1];
		$zpos = (($maxblock*8)-4);
		fseek($ix, $zpos, SEEK_SET);
		$ofs = unpack('V', fread($ix, 4))[1];
		$len = unpack('V', fread($ix, 4))[1];
		// read last block and calculate hash
		if (!$bc = fopen($fn,'r+b')) return("Can't open ".$fn);
		fseek($bc, $ofs, SEEK_SET);
		$block = fread($bc, $len);
		$hash = hash(_hashalg, $block);
		// add new block to the end of the chain
		fseek($bc, 0, SEEK_END);
		$pos = ftell($bc);
		write_block($bc, $data, $hash);
		fclose($bc);
		// update index
		update_index($ix, $pos, strlen($data), ($maxblock+1));
		fclose($ix);
		return TRUE;
	}
	else
	{
		if (file_exists($fn)) return('Blockchain data file already exists!');
		if (file_exists($indexfn)) return('Blockchain index file already exists!');
		$bc = fopen($fn, 'wb');
		$ix = fopen($indexfn, 'wb');
		write_block($bc, $data, str_repeat('00', _hashlen));
		update_index($ix, 0, strlen($data), 1);
		fclose($bc);
		fclose($ix);
		return TRUE;
	}
}

function write_block(&$fp, $data, $prevhash) {
	fwrite($fp, pack('V', _magic), 4);                // Magic
	fwrite($fp, chr(1), 1);                           // Version
	fwrite($fp, pack('V', time()), 4);                // Timestamp
	fwrite($fp, hex2bin($prevhash), _hashlen);        // Previous Hash
	fwrite($fp, pack('V', strlen($data)), 4);         // Data Length
	fwrite($fp, $data, strlen($data));                // Data
}

function update_index(&$fp, $pos, $datalen, $count) {
	fseek($fp, 0, SEEK_SET);
	fwrite($fp, pack('V', $count), 4);                // Record count
	fseek($fp, 0, SEEK_END);
	fwrite($fp, pack('V', $pos), 4);                  // Offset
	fwrite($fp, pack('V', ($datalen+_blksize)), 4);		// Length
}
